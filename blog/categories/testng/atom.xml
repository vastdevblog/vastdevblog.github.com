<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testng | Vast Blog]]></title>
  <link href="http://vastdevblog.vast.com/blog/categories/testng/atom.xml" rel="self"/>
  <link href="http://vastdevblog.vast.com/"/>
  <updated>2012-07-09T11:55:48-05:00</updated>
  <id>http://vastdevblog.vast.com/</id>
  <author>
    <name><![CDATA[vast.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Unique JUnit Test Names with TestNG Data Providers]]></title>
    <link href="http://vastdevblog.vast.com/blog/2012/05/14/generating-unique-junit-test-names-with-testng-data-providers/"/>
    <updated>2012-05-14T19:35:00-05:00</updated>
    <id>http://vastdevblog.vast.com/blog/2012/05/14/generating-unique-junit-test-names-with-testng-data-providers</id>
    <content type="html"><![CDATA[<p>We use <a href="http://www.testng.org/">TestNG</a> with the <a href="http://maven.apache.org/plugins/maven-failsafe-plugin/">Maven Failsafe Plugin</a> to implement integration tests for our Java platform services.</p>

<p>For this specific platform service we've defined a set of functional test suites each containing between a few and a few hundred test payloads and expected results, with each test payload and expected result pair constituting one logical unit test. Each TestNG test would run a single functional test suite, iterating over all test pairs &mdash; so while we may have hundreds of unit tests the TestNG reports would only show one test per functional test suite and would fail the entire functional test suite if a single unit test within failed.</p>

<p>This really wasn't ideal for a couple of reasons:</p>

<ul>
<li>Since each unit test is independent from each other it makes little sense for a single unit test to fail all the unit tests within the functional test suite</li>
<li>Test reports wouldn't adequately show the number of unit tests which succeeded, failed or were skipped</li>
</ul>


<!-- more -->


<p>Because of the large number of unit tests (hundreds of them) it just wasn't an option to list each unit test individually in either code or within a TestNG <code>testng.xml</code> file (although one could in theory generate this file at build time).</p>

<p>So over the week-end I decided that it was time to take another look at this.</p>

<p>I immediately thought the TestNG <code>@DataProvider</code> annotation was a great fit for our use case, where we "feed" a test payload and expected result pair for each test so I implemented the following:</p>

<p>``` java
public class CarsAndTravelIT {</p>

<pre><code>@DataProvider(name = "testSpec")
public Iterator&lt;Object[]&gt; createData(Method method) {
    // Retrieve the suite name from the annotation and pass it to the iterator which loads the input files within the test suite folder.
    return new TestSpecIterator(method.getAnnotation(TestSuite.class).suiteName());
}

@TestSuite(suiteName = "cars")
@Test(dataProvider = "testSpec")
public void carsTestSuite(TestSpec testSpec) throws Exception {
    performTestAndAssert(testSpec);
}

@TestSuite(suiteName = "travel")
@Test(dataProvider = "testSpec")
public void travelTestSuite(TestSpec testSpec) throws Exception {
    performTestAndAssert(testSpec);
}

@Retention(RetentionPolicy.RUNTIME)
protected @interface TestSuite {
    String suiteName();
}

protected class TestSpecIterator implements Iterator&lt;Object[]&gt; {

    protected TestSpecIterator(String suiteName) {
        ...
    }

    ...

    @Override
    public Object[] next() {
        return new Object[] {fileIterator.next()};
    }
}
</code></pre>

<p>}  <br/>
```</p>

<p>This code connects each test with a data provider named "testSpec", which is itself using a custom annotation to specify the functional test suite used to look up the test files.</p>

<p>So assuming the following test resources:</p>

<p>``` html
resources</p>

<pre><code>cars
    input1.xml
    input2.xml
    input3.xml
travel
    input1.xml
    input2.xml
</code></pre>

<p>```</p>

<p>TestNG will execute something equivalent to:</p>

<p><code>html
carsTestSuite("input1.xml")
carsTestSuite("input2.xml")
carsTestSuite("input3.xml")
travelTestSuite("input1.xml")
travelTestSuite("input2.xml")
</code></p>

<p>At this point I was pretty happy, and I could see that in the TestNG XML report and in the command line each individual test was being counted, so for the above example running <code>mvn integration-test</code> would show 5 tests executed &mdash; exactly what I wanted!</p>

<p>I checked the build results in our continuous build system only to discover that only 2 tests were being reported! What? How could I get 5 tests reported locally yet have 2 tests reported in our build system?</p>

<p>Eventually I tracked it down to the test names that TestNG generates in its JUnit XML report:</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;testsuite failures="0" time="..." errors="0" skipped="0" tests="5" name="TestSuite"&gt;
  ...
  &lt;testcase time="..." classname="..." name="carsTestSuite"/&gt;
  &lt;testcase time="..." classname="..." name="carsTestSuite"/&gt;
  &lt;testcase time="..." classname="..." name="carsTestSuite"/&gt;
  &lt;testcase time="..." classname="..." name="travelTestSuite"/&gt;
  &lt;testcase time="..." classname="..." name="travelTestSuite"/&gt;
&lt;/testsuite&gt;  
</code></p>

<p>So while 5 tests were executed only 2 distinct test names were generated in the JUnit XML report ("carsTestSuite" and "travelTestSuite") which causes the build system to report only 2 tests run. Whether that's legitimate or not I had to find a solution.</p>

<p>While there may other ways to achieve the same result (by extending the TestNG JUnit reporter for example) my goal was to keep the changes to a minimum and eventually settled on using the <code>getTestName</code> method from the TestNG <code>ITest</code> interface:</p>

<p>``` java
public class CarsAndTravelIT implements ITest {</p>

<pre><code>private static final ThreadLocal&lt;String&gt; testName = 
    new ThreadLocal&lt;String&gt; () {
        @Override 
        protected String initialValue() {
            return "undefinedTestName";
        }
    };

@DataProvider(name = "testSpec")
public Iterator&lt;Object[]&gt; createData(Method method) {
    // Retrieve the suite name from the annotation and pass it to the iterator which loads the input files within the test suite folder.
    return new TestSpecIterator(method.getName(), method.getAnnotation(TestSuite.class).suiteName());
}

@TestSuite(suiteName = "cars")
@Test(dataProvider = "testSpec")
public void carsTestSuite(TestSpec testSpec) throws Exception {
    performTestAndAssert(testSpec);
}

@TestSuite(suiteName = "travel")
@Test(dataProvider = "testSpec")
public void travelTestSuite(TestSpec testSpec) throws Exception {
    performTestAndAssert(testSpec);
}

@Override
public String getTestName() {
    return testName.get();
} 

@Retention(RetentionPolicy.RUNTIME)
protected @interface TestSuite {
    String suiteName();
}

protected class TestSpecIterator implements Iterator&lt;Object[]&gt; {

    protected TestSpecIterator(String suiteMethodName, String suiteName) {
        ...
    }

    ...

    @Override
    public Object[] next() {
        // We're assuming the caller has called hasNext() before calling this method.
        TestSpec next = fileIterator.next();
        // Set the test name from the suite method name and the input file name, since this is called
        // right before getTestName().
        testName.set(suiteMethodName + "-" + next.getInputFile().getName());
        return new Object[] {next};
    }
}
</code></pre>

<p>}  <br/>
```</p>

<p>Because the <code>getTestName</code> method get invoked right after the <code>next</code> method I chose to set the test name right then (since I used an iterator-backed data provider I could do that), which didn't require any additional changes to TestNG or its configuration. For safety I used a <code>ThreadLocal</code> but this will not be necessary if you can guarantee single threaded execution.</p>

<p>With those changes the JUnit XML report is now:</p>

<p><code>xml
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;testsuite failures="0" time="..." errors="0" skipped="0" tests="5" name="TestSuite"&gt;
  ...
  &lt;testcase time="..." classname="..." name="carsTestSuite-input1.xml"/&gt;
  &lt;testcase time="..." classname="..." name="carsTestSuite-input2.xml"/&gt;
  &lt;testcase time="..." classname="..." name="carsTestSuite-input3.xml"/&gt;
  &lt;testcase time="..." classname="..." name="travelTestSuite-input1.xml"/&gt;
  &lt;testcase time="..." classname="..." name="travelTestSuite-input2.xml"/&gt;
&lt;/testsuite&gt;  
</code></p>

<p>And now not only the is JUnit XML report had more specific test case names but our continuous build system was also reporting 5 tests. Voila!</p>

<p>I will file an enhancement request with the TestNG project to support this exact use case.</p>

<p>Hopefully this post will be helpful to others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Dependency Injection in Scala test cases with TestNG]]></title>
    <link href="http://vastdevblog.vast.com/blog/2012/03/23/handling-dependency-injection-in-scala-test-cases-with-testng/"/>
    <updated>2012-03-23T15:46:00-05:00</updated>
    <id>http://vastdevblog.vast.com/blog/2012/03/23/handling-dependency-injection-in-scala-test-cases-with-testng</id>
    <content type="html"><![CDATA[<p>This is a short post about using <a href="http://code.google.com/p/google-guice/">Guice</a> dependency injection
in Scala test cases that are configured with <a href="http://testng.org/doc/index.html">TestNG</a> annotations.
The two interesting points are</p>

<ul>
<li>How in Guice do you override production dependencies with test ones when you want to execute a test case?</li>
<li>How do you use TestNG with Scala?</li>
</ul>


<!-- more -->


<p>Here's a simple example showing how this works.</p>

<p>``` scala
import org.testng.Assert._
import org.testng.annotations.{Guice, Test}
import org.testng.{ITestContext, IModuleFactory}</p>

<p>@Guice(moduleFactory = classOf[ExampleTestModuleFactory])
class ExampleTest {</p>

<p>  @Inject
  var idGenerator: UniqueIdGenerator = _</p>

<p>  /<em>*
   * Make sure we're using the UniqueIdGenerator that
   * returns IDs from a known list.
   </em>/
  @Test
  def notUnique() {</p>

<pre><code>assertEquals(idGenerator.nextId(), "7411c0c8-358c-4e5c-879d-96112806c9aa")
</code></pre>

<p>  }
}</p>

<p>class ExampleTestModuleFactory extends IModuleFactory {</p>

<p>  def createModule(context: ITextContext, testClass: Class[_]) = {</p>

<pre><code>Modules.`override`(new ProductionModuleOne, new ProductionModuleTwo)
  .`with`(new ExampleTestModule)
</code></pre>

<p>  }
}
```</p>

<p>Starting at the top with the <code>@Guice</code> annotation. This identifies the class that TestNG will
use to create the Guice module to provide the dependencies for the test. This class, in
the example ExampleTestModuleFactory, has
to extend the IModuleFactory interface and return the module to use from the
<code>createModule(context: ITextContext, testClass: Class[_])</code> method. Instead of a moduleFactory The <code>@Guice</code> annotation can also
be used by simply listing the guice modules <code>@Guice(module = Array(classOf[ProductionModuleOne], classOf[ProductionModuleTwo]))</code> but this doesn't allow for replacing production dependencies with test ones.</p>

<p>In ExampleTextModuleFactory the <code>override</code> and <code>with</code> methods on the
<a href="http://google-guice.googlecode.com/git/javadoc/com/google/inject/util/Modules.html">Modules</a> and
<a href="http://google-guice.googlecode.com/git/javadoc/com/google/inject/util/Modules.OverriddenModuleBuilder.html">OverriddenModuleBuilder</a>
classes are used to combine the production dependencies and then override some of them with test dependencies.
The bindings in the ExampleTestModule override those for the same key in the production modules.
This lets you replace just the dependencies you need with test ones without having to replicate the complete production configuration.
Backticks must be used around override and with because they are reserved words in Scala.</p>

<p>To use the dependencies you just need to add the <code>@Inject</code> annotation to the test class to inject values for variables, as in the example.
Unfortunately you can't inject parameters into test methods using Guice, you have to use TestNG's facilities for that.</p>
]]></content>
  </entry>
  
</feed>
